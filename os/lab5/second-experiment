При k = 10 и n = 11 400 000 все процессы корректно завершились, и это можно объяснить тем, что один скрипт mem.bash, создающий массив на x элементов, будет расходовать практически столько же памяти, сколько занимают 10 таких же скриптов, создающих массив на x / 10 элементов

При k = 30 и n = 11 400 000 процессы начали по очереди аварийно завершаться. Это можно объяснить тем, что 30 скриптов, создающих массив на x / 10 элементов, будут расходовать в 3 раза больше памяти, чем 10 скриптов, создающих массив на x / 10 элементов, но именно на 10 таких скриптов максимум хватает памяти без аварийного завершения какого-либо скрипта, то есть мы пытаемся израсходовать в 3 раза больше памяти, чем нам доступно, и поэтому происходит аварийное завершение процессов. Стоит сказать, что запуск скриптов интервалом в 1 секунду нам не помогает освободить память, так как все скрипты работают дольше 30 секунд, то есть запуск последнего скрипта происходит когда первый скрипт ещё не завершился и большую часть времени скрипты работают одновременно друг с другом

Исходя из этих соображений, я взял новое n = старое n / 3 = 3 800 000, и при данном значении n все 30 скриптов завершились благополучно и при этом каждый скрипт перед завершением расходовал чуть больше 3% оперативной памяти
Однако из-за того, что мы запускаем скрипты с интервалом в секунду, они достигают пикового расхода памяти не одновременно и когда первый процесс уже завершается, некоторые процессы ещё не достигают пика и могут использовать память, освобождённую первым процессом. Поэтому максимально допустимое для корректной работы скриптов n больше вычесленного мной - оно составлет 4 478 000. При n = 4 479 000 несколько процессов аварийно завершаются.
